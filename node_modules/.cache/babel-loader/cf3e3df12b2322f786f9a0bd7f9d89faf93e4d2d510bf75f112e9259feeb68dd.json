{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Baap\\\\Desktop\\\\campus-event-management\\\\campus-event-frontend\\\\src\\\\components\\\\common\\\\HealthCheck.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../utils/axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HealthCheck = () => {\n  _s();\n  const [healthStatus, setHealthStatus] = useState('checking');\n  const [lastChecked, setLastChecked] = useState(null);\n  const checkHealth = async () => {\n    try {\n      setHealthStatus('checking');\n      const response = await axios.get('/api/health');\n      if (response.status === 200) {\n        setHealthStatus('healthy');\n        setLastChecked(new Date().toLocaleTimeString());\n      } else {\n        setHealthStatus('unhealthy');\n      }\n    } catch (error) {\n      console.error('Health check failed:', error);\n      setHealthStatus('unhealthy');\n      setLastChecked(new Date().toLocaleTimeString());\n    }\n  };\n  useEffect(() => {\n    checkHealth();\n    // Check health every 30 seconds\n    const interval = setInterval(checkHealth, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const getStatusColor = () => {\n    switch (healthStatus) {\n      case 'healthy':\n        return 'text-success';\n      case 'unhealthy':\n        return 'text-danger';\n      case 'checking':\n        return 'text-warning';\n      default:\n        return 'text-muted';\n    }\n  };\n  const getStatusIcon = () => {\n    switch (healthStatus) {\n      case 'healthy':\n        return '✅';\n      case 'unhealthy':\n        return '❌';\n      case 'checking':\n        return '⏳';\n      default:\n        return '❓';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"health-check d-flex align-items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: `me-2 ${getStatusColor()}`,\n      children: [getStatusIcon(), \" Backend: \", healthStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), lastChecked && /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"text-muted\",\n      children: [\"(Last checked: \", lastChecked, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-sm btn-outline-secondary ms-2\",\n      onClick: checkHealth,\n      disabled: healthStatus === 'checking',\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthCheck, \"YY7+zybw9FXssYIJgnri5PZOTzE=\");\n_c = HealthCheck;\nexport default HealthCheck;\nvar _c;\n$RefreshReg$(_c, \"HealthCheck\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","HealthCheck","_s","healthStatus","setHealthStatus","lastChecked","setLastChecked","checkHealth","response","get","status","Date","toLocaleTimeString","error","console","interval","setInterval","clearInterval","getStatusColor","getStatusIcon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Baap/Desktop/campus-event-management/campus-event-frontend/src/components/common/HealthCheck.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from '../../utils/axios';\r\n\r\nconst HealthCheck = () => {\r\n  const [healthStatus, setHealthStatus] = useState('checking');\r\n  const [lastChecked, setLastChecked] = useState(null);\r\n\r\n  const checkHealth = async () => {\r\n    try {\r\n      setHealthStatus('checking');\r\n      const response = await axios.get('/api/health');\r\n      \r\n      if (response.status === 200) {\r\n        setHealthStatus('healthy');\r\n        setLastChecked(new Date().toLocaleTimeString());\r\n      } else {\r\n        setHealthStatus('unhealthy');\r\n      }\r\n    } catch (error) {\r\n      console.error('Health check failed:', error);\r\n      setHealthStatus('unhealthy');\r\n      setLastChecked(new Date().toLocaleTimeString());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkHealth();\r\n    // Check health every 30 seconds\r\n    const interval = setInterval(checkHealth, 30000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getStatusColor = () => {\r\n    switch (healthStatus) {\r\n      case 'healthy': return 'text-success';\r\n      case 'unhealthy': return 'text-danger';\r\n      case 'checking': return 'text-warning';\r\n      default: return 'text-muted';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = () => {\r\n    switch (healthStatus) {\r\n      case 'healthy': return '✅';\r\n      case 'unhealthy': return '❌';\r\n      case 'checking': return '⏳';\r\n      default: return '❓';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"health-check d-flex align-items-center\">\r\n      <span className={`me-2 ${getStatusColor()}`}>\r\n        {getStatusIcon()} Backend: {healthStatus}\r\n      </span>\r\n      {lastChecked && (\r\n        <small className=\"text-muted\">\r\n          (Last checked: {lastChecked})\r\n        </small>\r\n      )}\r\n      <button \r\n        className=\"btn btn-sm btn-outline-secondary ms-2\"\r\n        onClick={checkHealth}\r\n        disabled={healthStatus === 'checking'}\r\n      >\r\n        Refresh\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthCheck;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}