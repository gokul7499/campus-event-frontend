{"ast":null,"code":"import axios from'axios';import config from'../config/config';// Create axios instance with base configuration\nconst axiosInstance=axios.create({baseURL:config.api.baseURL,timeout:config.api.timeout,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\naxiosInstance.interceptors.request.use(config=>{var _config$method;// Debug logging\nconsole.log('üöÄ API Request:',{method:(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),url:config.url,baseURL:config.baseURL,fullURL:\"\".concat(config.baseURL).concat(config.url)});const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);console.log('üîë Token added to request');}return config;},error=>{console.error('‚ùå Request interceptor error:',error);return Promise.reject(error);});// Response interceptor to handle errors\naxiosInstance.interceptors.response.use(response=>{console.log('‚úÖ API Response:',{status:response.status,url:response.config.url,data:response.data});return response;},error=>{var _error$response,_error$response2,_error$config,_error$config2,_error$config3,_error$config3$method,_error$response3,_error$response4,_error$response5,_error$response6;console.error('‚ùå API Error Details:',{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,statusText:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.statusText,message:error.message,url:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,baseURL:(_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.baseURL,fullURL:error.config?\"\".concat(error.config.baseURL).concat(error.config.url):'Unknown',method:(_error$config3=error.config)===null||_error$config3===void 0?void 0:(_error$config3$method=_error$config3.method)===null||_error$config3$method===void 0?void 0:_error$config3$method.toUpperCase(),data:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data,headers:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.headers});// Handle specific error types\nif(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status)===404){console.error('üö´ 404 Error: API endpoint not found. Check if backend is running and endpoints are correct.');console.error('üîç Attempted URL:',error.config?\"\".concat(error.config.baseURL).concat(error.config.url):'Unknown');}// Only handle 401 errors for non-auth endpoints  \nif(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)===401&&!error.config.url.includes('/auth/')){// Token expired or invalid for protected routes\nlocalStorage.removeItem('token');// Don't redirect immediately, let the component handle it\nconsole.warn('Token expired, please login again');}return Promise.reject(error);});export default axiosInstance;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}