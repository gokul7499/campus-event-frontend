{"ast":null,"code":"import _objectSpread from\"C:/Users/Baap/Desktop/campus-event-management/campus-event-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect,useCallback}from'react';import{toast}from'react-toastify';import axios from'../utils/axios';import{useSocket}from'./SocketContext';import{useAuth}from'./AuthContext';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={notifications:[],unreadCount:0,loading:false,error:null};// Action types\nconst NOTIFICATION_ACTIONS={FETCH_START:'FETCH_START',FETCH_SUCCESS:'FETCH_SUCCESS',FETCH_FAILURE:'FETCH_FAILURE',ADD_NOTIFICATION:'ADD_NOTIFICATION',MARK_AS_READ:'MARK_AS_READ',MARK_ALL_AS_READ:'MARK_ALL_AS_READ',DELETE_NOTIFICATION:'DELETE_NOTIFICATION',UPDATE_UNREAD_COUNT:'UPDATE_UNREAD_COUNT',CLEAR_ERROR:'CLEAR_ERROR'};// Reducer\nconst notificationReducer=(state,action)=>{switch(action.type){case NOTIFICATION_ACTIONS.FETCH_START:return _objectSpread(_objectSpread({},state),{},{loading:true,error:null});case NOTIFICATION_ACTIONS.FETCH_SUCCESS:return _objectSpread(_objectSpread({},state),{},{notifications:action.payload.notifications,unreadCount:action.payload.unreadCount,loading:false,error:null});case NOTIFICATION_ACTIONS.FETCH_FAILURE:return _objectSpread(_objectSpread({},state),{},{loading:false,error:action.payload});case NOTIFICATION_ACTIONS.ADD_NOTIFICATION:return _objectSpread(_objectSpread({},state),{},{notifications:[action.payload,...state.notifications],unreadCount:state.unreadCount+1});case NOTIFICATION_ACTIONS.MARK_AS_READ:return _objectSpread(_objectSpread({},state),{},{notifications:state.notifications.map(notification=>notification._id===action.payload?_objectSpread(_objectSpread({},notification),{},{isRead:true,readAt:new Date()}):notification),unreadCount:Math.max(0,state.unreadCount-1)});case NOTIFICATION_ACTIONS.MARK_ALL_AS_READ:return _objectSpread(_objectSpread({},state),{},{notifications:state.notifications.map(notification=>_objectSpread(_objectSpread({},notification),{},{isRead:true,readAt:new Date()})),unreadCount:0});case NOTIFICATION_ACTIONS.DELETE_NOTIFICATION:const deletedNotification=state.notifications.find(n=>n._id===action.payload);return _objectSpread(_objectSpread({},state),{},{notifications:state.notifications.filter(n=>n._id!==action.payload),unreadCount:deletedNotification&&!deletedNotification.isRead?Math.max(0,state.unreadCount-1):state.unreadCount});case NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT:return _objectSpread(_objectSpread({},state),{},{unreadCount:action.payload});case NOTIFICATION_ACTIONS.CLEAR_ERROR:return _objectSpread(_objectSpread({},state),{},{error:null});default:return state;}};// Create context\nconst NotificationContext=/*#__PURE__*/createContext();// Notification provider component\nexport const NotificationProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(notificationReducer,initialState);const{socket,onNotification}=useSocket();const{user}=useAuth();// Fetch notifications\nconst fetchNotifications=useCallback(async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;if(!user)return;dispatch({type:NOTIFICATION_ACTIONS.FETCH_START});try{const[notificationsResponse,unreadCountResponse]=await Promise.all([axios.get(\"/api/notifications?page=\".concat(page,\"&limit=\").concat(limit)),axios.get('/api/notifications?isRead=false&limit=1')]);dispatch({type:NOTIFICATION_ACTIONS.FETCH_SUCCESS,payload:{notifications:notificationsResponse.data.data,unreadCount:unreadCountResponse.data.pagination.totalItems}});}catch(error){var _error$response,_error$response$data;dispatch({type:NOTIFICATION_ACTIONS.FETCH_FAILURE,payload:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to fetch notifications'});}},[user]);// Mark notification as read\nconst markAsRead=async notificationId=>{try{await axios.put(\"/api/notifications/\".concat(notificationId,\"/read\"));dispatch({type:NOTIFICATION_ACTIONS.MARK_AS_READ,payload:notificationId});}catch(error){console.error('Failed to mark notification as read:',error);}};// Mark all notifications as read\nconst markAllAsRead=async()=>{try{await axios.put('/api/notifications/read-all');dispatch({type:NOTIFICATION_ACTIONS.MARK_ALL_AS_READ});}catch(error){console.error('Failed to mark all notifications as read:',error);}};// Delete notification\nconst deleteNotification=async notificationId=>{try{await axios.delete(\"/api/notifications/\".concat(notificationId));dispatch({type:NOTIFICATION_ACTIONS.DELETE_NOTIFICATION,payload:notificationId});}catch(error){console.error('Failed to delete notification:',error);}};// Show toast notification\nconst showToast=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const defaultOptions=_objectSpread({position:'top-right',autoClose:5000,hideProgressBar:false,closeOnClick:true,pauseOnHover:true,draggable:true},options);switch(type){case'success':toast.success(message,defaultOptions);break;case'error':toast.error(message,defaultOptions);break;case'warning':toast.warning(message,defaultOptions);break;case'info':default:toast.info(message,defaultOptions);break;}};// Send notification\nconst sendNotification=async notificationData=>{try{const response=await axios.post('/api/notifications/send',notificationData);return{success:true,data:response.data};}catch(error){var _error$response2,_error$response2$data;const errorMessage=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Failed to send notification';return{success:false,error:errorMessage};}};// Send bulk notification\nconst sendBulkNotification=async notificationData=>{try{const response=await axios.post('/api/notifications/send-bulk',notificationData);return{success:true,data:response.data};}catch(error){var _error$response3,_error$response3$data;const errorMessage=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Failed to send bulk notification';return{success:false,error:errorMessage};}};// Clear error\nconst clearError=()=>{dispatch({type:NOTIFICATION_ACTIONS.CLEAR_ERROR});};// Listen for real-time notifications\nuseEffect(()=>{if(socket&&user){const cleanup=onNotification(notification=>{// Add to state\ndispatch({type:NOTIFICATION_ACTIONS.ADD_NOTIFICATION,payload:notification});// Show toast notification\nshowToast(notification.message,'info',{onClick:()=>markAsRead(notification.id)});});return cleanup;}},[socket,user,onNotification]);// Fetch notifications when user logs in\nuseEffect(()=>{if(user){fetchNotifications();}},[user,fetchNotifications]);const value=_objectSpread(_objectSpread({},state),{},{fetchNotifications,markAsRead,markAllAsRead,deleteNotification,showToast,sendNotification,sendBulkNotification,clearError});return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:value,children:children});};// Custom hook to use notification context\nexport const useNotification=()=>{const context=useContext(NotificationContext);if(!context){throw new Error('useNotification must be used within a NotificationProvider');}return context;};export default NotificationContext;","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","toast","axios","useSocket","useAuth","jsx","_jsx","initialState","notifications","unreadCount","loading","error","NOTIFICATION_ACTIONS","FETCH_START","FETCH_SUCCESS","FETCH_FAILURE","ADD_NOTIFICATION","MARK_AS_READ","MARK_ALL_AS_READ","DELETE_NOTIFICATION","UPDATE_UNREAD_COUNT","CLEAR_ERROR","notificationReducer","state","action","type","_objectSpread","payload","map","notification","_id","isRead","readAt","Date","Math","max","deletedNotification","find","n","filter","NotificationContext","NotificationProvider","_ref","children","dispatch","socket","onNotification","user","fetchNotifications","page","arguments","length","undefined","limit","notificationsResponse","unreadCountResponse","Promise","all","get","concat","data","pagination","totalItems","_error$response","_error$response$data","response","message","markAsRead","notificationId","put","console","markAllAsRead","deleteNotification","delete","showToast","options","defaultOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","success","warning","info","sendNotification","notificationData","post","_error$response2","_error$response2$data","errorMessage","sendBulkNotification","_error$response3","_error$response3$data","clearError","cleanup","onClick","id","value","Provider","useNotification","context","Error"],"sources":["C:/Users/Baap/Desktop/campus-event-management/campus-event-frontend/src/context/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport axios from '../utils/axios';\r\nimport { useSocket } from './SocketContext';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// Action types\r\nconst NOTIFICATION_ACTIONS = {\r\n  FETCH_START: 'FETCH_START',\r\n  FETCH_SUCCESS: 'FETCH_SUCCESS',\r\n  FETCH_FAILURE: 'FETCH_FAILURE',\r\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\r\n  MARK_AS_READ: 'MARK_AS_READ',\r\n  MARK_ALL_AS_READ: 'MARK_ALL_AS_READ',\r\n  DELETE_NOTIFICATION: 'DELETE_NOTIFICATION',\r\n  UPDATE_UNREAD_COUNT: 'UPDATE_UNREAD_COUNT',\r\n  CLEAR_ERROR: 'CLEAR_ERROR'\r\n};\r\n\r\n// Reducer\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case NOTIFICATION_ACTIONS.FETCH_START:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.FETCH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        notifications: action.payload.notifications,\r\n        unreadCount: action.payload.unreadCount,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.FETCH_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.ADD_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: [action.payload, ...state.notifications],\r\n        unreadCount: state.unreadCount + 1\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.MARK_AS_READ:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification =>\r\n          notification._id === action.payload\r\n            ? { ...notification, isRead: true, readAt: new Date() }\r\n            : notification\r\n        ),\r\n        unreadCount: Math.max(0, state.unreadCount - 1)\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.MARK_ALL_AS_READ:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.map(notification => ({\r\n          ...notification,\r\n          isRead: true,\r\n          readAt: new Date()\r\n        })),\r\n        unreadCount: 0\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.DELETE_NOTIFICATION:\r\n      const deletedNotification = state.notifications.find(n => n._id === action.payload);\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(n => n._id !== action.payload),\r\n        unreadCount: deletedNotification && !deletedNotification.isRead \r\n          ? Math.max(0, state.unreadCount - 1) \r\n          : state.unreadCount\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.UPDATE_UNREAD_COUNT:\r\n      return {\r\n        ...state,\r\n        unreadCount: action.payload\r\n      };\r\n\r\n    case NOTIFICATION_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst NotificationContext = createContext();\r\n\r\n// Notification provider component\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\r\n  const { socket, onNotification } = useSocket();\r\n  const { user } = useAuth();\r\n\r\n  // Fetch notifications\r\n  const fetchNotifications = useCallback(async (page = 1, limit = 20) => {\r\n    if (!user) return;\r\n\r\n    dispatch({ type: NOTIFICATION_ACTIONS.FETCH_START });\r\n    \r\n    try {\r\n      const [notificationsResponse, unreadCountResponse] = await Promise.all([\r\n        axios.get(`/api/notifications?page=${page}&limit=${limit}`),\r\n        axios.get('/api/notifications?isRead=false&limit=1')\r\n      ]);\r\n\r\n      dispatch({\r\n        type: NOTIFICATION_ACTIONS.FETCH_SUCCESS,\r\n        payload: {\r\n          notifications: notificationsResponse.data.data,\r\n          unreadCount: unreadCountResponse.data.pagination.totalItems\r\n        }\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: NOTIFICATION_ACTIONS.FETCH_FAILURE,\r\n        payload: error.response?.data?.message || 'Failed to fetch notifications'\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  // Mark notification as read\r\n  const markAsRead = async (notificationId) => {\r\n    try {\r\n      await axios.put(`/api/notifications/${notificationId}/read`);\r\n      dispatch({\r\n        type: NOTIFICATION_ACTIONS.MARK_AS_READ,\r\n        payload: notificationId\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to mark notification as read:', error);\r\n    }\r\n  };\r\n\r\n  // Mark all notifications as read\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      await axios.put('/api/notifications/read-all');\r\n      dispatch({ type: NOTIFICATION_ACTIONS.MARK_ALL_AS_READ });\r\n    } catch (error) {\r\n      console.error('Failed to mark all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  // Delete notification\r\n  const deleteNotification = async (notificationId) => {\r\n    try {\r\n      await axios.delete(`/api/notifications/${notificationId}`);\r\n      dispatch({\r\n        type: NOTIFICATION_ACTIONS.DELETE_NOTIFICATION,\r\n        payload: notificationId\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to delete notification:', error);\r\n    }\r\n  };\r\n\r\n  // Show toast notification\r\n  const showToast = (message, type = 'info', options = {}) => {\r\n    const defaultOptions = {\r\n      position: 'top-right',\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      ...options\r\n    };\r\n\r\n    switch (type) {\r\n      case 'success':\r\n        toast.success(message, defaultOptions);\r\n        break;\r\n      case 'error':\r\n        toast.error(message, defaultOptions);\r\n        break;\r\n      case 'warning':\r\n        toast.warning(message, defaultOptions);\r\n        break;\r\n      case 'info':\r\n      default:\r\n        toast.info(message, defaultOptions);\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Send notification\r\n  const sendNotification = async (notificationData) => {\r\n    try {\r\n      const response = await axios.post('/api/notifications/send', notificationData);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to send notification';\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Send bulk notification\r\n  const sendBulkNotification = async (notificationData) => {\r\n    try {\r\n      const response = await axios.post('/api/notifications/send-bulk', notificationData);\r\n      return { success: true, data: response.data };\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to send bulk notification';\r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    dispatch({ type: NOTIFICATION_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // Listen for real-time notifications\r\n  useEffect(() => {\r\n    if (socket && user) {\r\n      const cleanup = onNotification((notification) => {\r\n        // Add to state\r\n        dispatch({\r\n          type: NOTIFICATION_ACTIONS.ADD_NOTIFICATION,\r\n          payload: notification\r\n        });\r\n\r\n        // Show toast notification\r\n        showToast(notification.message, 'info', {\r\n          onClick: () => markAsRead(notification.id)\r\n        });\r\n      });\r\n\r\n      return cleanup;\r\n    }\r\n  }, [socket, user, onNotification]);\r\n\r\n  // Fetch notifications when user logs in\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchNotifications();\r\n    }\r\n  }, [user, fetchNotifications]);\r\n\r\n  const value = {\r\n    ...state,\r\n    fetchNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    showToast,\r\n    sendNotification,\r\n    sendBulkNotification,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use notification context\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default NotificationContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}