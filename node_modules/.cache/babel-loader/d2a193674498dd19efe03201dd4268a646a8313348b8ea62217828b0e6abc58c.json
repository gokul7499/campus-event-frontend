{"ast":null,"code":"// Test Backend Connectivity from Frontend\nconst testBackend = async () => {\n  const BASE_URL = 'https://campus-event-backend.onrender.com';\n  console.log('üß™ Testing Backend Connectivity...\\n');\n  console.log(`üìç Backend URL: ${BASE_URL}\\n`);\n  const tests = [{\n    name: 'Health Check',\n    url: '/api/health',\n    method: 'GET'\n  }, {\n    name: 'Test Endpoint',\n    url: '/api/test',\n    method: 'GET'\n  }, {\n    name: 'Auth Register',\n    url: '/api/auth/register',\n    method: 'POST',\n    data: {\n      test: true\n    }\n  }, {\n    name: 'Auth Login',\n    url: '/api/auth/login',\n    method: 'POST',\n    data: {\n      test: true\n    }\n  }];\n  for (const test of tests) {\n    try {\n      console.log(`üîç Testing: ${test.name}`);\n      console.log(`üìù ${test.method} ${test.url}`);\n      const response = await fetch(`${BASE_URL}${test.url}`, {\n        method: test.method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        ...(test.data && {\n          body: JSON.stringify(test.data)\n        })\n      });\n      console.log(`‚úÖ Status: ${response.status}`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`üìä Response:`, data);\n      } else {\n        const errorData = await response.json();\n        console.log(`‚ùå Error Response:`, errorData);\n      }\n      console.log('‚îÄ'.repeat(50));\n    } catch (error) {\n      console.log(`‚ùå Network Error: ${error.message}`);\n      console.log('‚îÄ'.repeat(50));\n    }\n  }\n};\n\n// Run tests if in browser\nif (typeof window !== 'undefined') {\n  window.testBackend = testBackend;\n  console.log('üß™ Backend test function available as: window.testBackend()');\n} else {\n  // Node.js environment\n  testBackend().catch(console.error);\n}","map":{"version":3,"names":["testBackend","BASE_URL","console","log","tests","name","url","method","data","test","response","fetch","headers","body","JSON","stringify","status","ok","json","errorData","repeat","error","message","window","catch"],"sources":["C:/Users/Baap/Desktop/campus-event-management/campus-event-frontend/src/test-backend.js"],"sourcesContent":["// Test Backend Connectivity from Frontend\r\nconst testBackend = async () => {\r\n  const BASE_URL = 'https://campus-event-backend.onrender.com';\r\n  \r\n  console.log('üß™ Testing Backend Connectivity...\\n');\r\n  console.log(`üìç Backend URL: ${BASE_URL}\\n`);\r\n\r\n  const tests = [\r\n    {\r\n      name: 'Health Check',\r\n      url: '/api/health',\r\n      method: 'GET'\r\n    },\r\n    {\r\n      name: 'Test Endpoint',\r\n      url: '/api/test',\r\n      method: 'GET'\r\n    },\r\n    {\r\n      name: 'Auth Register',\r\n      url: '/api/auth/register',\r\n      method: 'POST',\r\n      data: { test: true }\r\n    },\r\n    {\r\n      name: 'Auth Login',\r\n      url: '/api/auth/login',\r\n      method: 'POST',\r\n      data: { test: true }\r\n    }\r\n  ];\r\n\r\n  for (const test of tests) {\r\n    try {\r\n      console.log(`üîç Testing: ${test.name}`);\r\n      console.log(`üìù ${test.method} ${test.url}`);\r\n      \r\n      const response = await fetch(`${BASE_URL}${test.url}`, {\r\n        method: test.method,\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        ...(test.data && { body: JSON.stringify(test.data) })\r\n      });\r\n      \r\n      console.log(`‚úÖ Status: ${response.status}`);\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(`üìä Response:`, data);\r\n      } else {\r\n        const errorData = await response.json();\r\n        console.log(`‚ùå Error Response:`, errorData);\r\n      }\r\n      \r\n      console.log('‚îÄ'.repeat(50));\r\n      \r\n    } catch (error) {\r\n      console.log(`‚ùå Network Error: ${error.message}`);\r\n      console.log('‚îÄ'.repeat(50));\r\n    }\r\n  }\r\n};\r\n\r\n// Run tests if in browser\r\nif (typeof window !== 'undefined') {\r\n  window.testBackend = testBackend;\r\n  console.log('üß™ Backend test function available as: window.testBackend()');\r\n} else {\r\n  // Node.js environment\r\n  testBackend().catch(console.error);\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,QAAQ,GAAG,2CAA2C;EAE5DC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EACnDD,OAAO,CAACC,GAAG,CAAC,mBAAmBF,QAAQ,IAAI,CAAC;EAE5C,MAAMG,KAAK,GAAG,CACZ;IACEC,IAAI,EAAE,cAAc;IACpBC,GAAG,EAAE,aAAa;IAClBC,MAAM,EAAE;EACV,CAAC,EACD;IACEF,IAAI,EAAE,eAAe;IACrBC,GAAG,EAAE,WAAW;IAChBC,MAAM,EAAE;EACV,CAAC,EACD;IACEF,IAAI,EAAE,eAAe;IACrBC,GAAG,EAAE,oBAAoB;IACzBC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAK;EACrB,CAAC,EACD;IACEJ,IAAI,EAAE,YAAY;IAClBC,GAAG,EAAE,iBAAiB;IACtBC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE;MAAEC,IAAI,EAAE;IAAK;EACrB,CAAC,CACF;EAED,KAAK,MAAMA,IAAI,IAAIL,KAAK,EAAE;IACxB,IAAI;MACFF,OAAO,CAACC,GAAG,CAAC,eAAeM,IAAI,CAACJ,IAAI,EAAE,CAAC;MACvCH,OAAO,CAACC,GAAG,CAAC,MAAMM,IAAI,CAACF,MAAM,IAAIE,IAAI,CAACH,GAAG,EAAE,CAAC;MAE5C,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGV,QAAQ,GAAGQ,IAAI,CAACH,GAAG,EAAE,EAAE;QACrDC,MAAM,EAAEE,IAAI,CAACF,MAAM;QACnBK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACD,IAAIH,IAAI,CAACD,IAAI,IAAI;UAAEK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAACD,IAAI;QAAE,CAAC;MACtD,CAAC,CAAC;MAEFN,OAAO,CAACC,GAAG,CAAC,aAAaO,QAAQ,CAACM,MAAM,EAAE,CAAC;MAE3C,IAAIN,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMT,IAAI,GAAG,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClChB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEK,IAAI,CAAC;MACnC,CAAC,MAAM;QACL,MAAMW,SAAS,GAAG,MAAMT,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACvChB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgB,SAAS,CAAC;MAC7C;MAEAjB,OAAO,CAACC,GAAG,CAAC,GAAG,CAACiB,MAAM,CAAC,EAAE,CAAC,CAAC;IAE7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdnB,OAAO,CAACC,GAAG,CAAC,oBAAoBkB,KAAK,CAACC,OAAO,EAAE,CAAC;MAChDpB,OAAO,CAACC,GAAG,CAAC,GAAG,CAACiB,MAAM,CAAC,EAAE,CAAC,CAAC;IAC7B;EACF;AACF,CAAC;;AAED;AACA,IAAI,OAAOG,MAAM,KAAK,WAAW,EAAE;EACjCA,MAAM,CAACvB,WAAW,GAAGA,WAAW;EAChCE,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;AAC5E,CAAC,MAAM;EACL;EACAH,WAAW,CAAC,CAAC,CAACwB,KAAK,CAACtB,OAAO,CAACmB,KAAK,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}