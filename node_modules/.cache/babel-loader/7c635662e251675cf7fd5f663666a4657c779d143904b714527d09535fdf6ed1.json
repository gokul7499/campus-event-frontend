{"ast":null,"code":"/**\n * Utility functions for formatting addresses\n */\n\n/**\n * Format an address object or string into a readable string\n * @param {Object|string} address - Address object or string\n * @returns {string} Formatted address string\n */\nexport const formatAddress = address => {\n  if (!address) return '';\n\n  // If it's already a string, return as is\n  if (typeof address === 'string') {\n    return address;\n  }\n\n  // If it's an object, format it\n  if (typeof address === 'object') {\n    const parts = [address.street, address.city, address.state, address.zipCode, address.country].filter(Boolean); // Remove empty/null/undefined values\n\n    return parts.join(', ');\n  }\n  return '';\n};\n\n/**\n * Format address for display with line breaks\n * @param {Object|string} address - Address object or string\n * @returns {Array} Array of address lines\n */\nexport const formatAddressLines = address => {\n  if (!address) return [];\n\n  // If it's already a string, return as single line\n  if (typeof address === 'string') {\n    return [address];\n  }\n\n  // If it's an object, format it with proper line breaks\n  if (typeof address === 'object') {\n    const lines = [];\n    if (address.street) {\n      lines.push(address.street);\n    }\n    const cityStateZip = [address.city, address.state, address.zipCode].filter(Boolean).join(', ');\n    if (cityStateZip) {\n      lines.push(cityStateZip);\n    }\n    if (address.country) {\n      lines.push(address.country);\n    }\n    return lines;\n  }\n  return [];\n};\n\n/**\n * Get a short version of the address (typically just city, state)\n * @param {Object|string} address - Address object or string\n * @returns {string} Short address string\n */\nexport const formatShortAddress = address => {\n  if (!address) return '';\n\n  // If it's already a string, return first part\n  if (typeof address === 'string') {\n    return address.split(',')[0] || address;\n  }\n\n  // If it's an object, return city and state\n  if (typeof address === 'object') {\n    const parts = [address.city, address.state].filter(Boolean);\n    return parts.join(', ');\n  }\n  return '';\n};","map":{"version":3,"names":["formatAddress","address","parts","street","city","state","zipCode","country","filter","Boolean","join","formatAddressLines","lines","push","cityStateZip","formatShortAddress","split"],"sources":["C:/Users/Baap/Desktop/u18/frontend/src/utils/addressUtils.js"],"sourcesContent":["/**\n * Utility functions for formatting addresses\n */\n\n/**\n * Format an address object or string into a readable string\n * @param {Object|string} address - Address object or string\n * @returns {string} Formatted address string\n */\nexport const formatAddress = (address) => {\n  if (!address) return '';\n  \n  // If it's already a string, return as is\n  if (typeof address === 'string') {\n    return address;\n  }\n  \n  // If it's an object, format it\n  if (typeof address === 'object') {\n    const parts = [\n      address.street,\n      address.city,\n      address.state,\n      address.zipCode,\n      address.country\n    ].filter(Boolean); // Remove empty/null/undefined values\n    \n    return parts.join(', ');\n  }\n  \n  return '';\n};\n\n/**\n * Format address for display with line breaks\n * @param {Object|string} address - Address object or string\n * @returns {Array} Array of address lines\n */\nexport const formatAddressLines = (address) => {\n  if (!address) return [];\n  \n  // If it's already a string, return as single line\n  if (typeof address === 'string') {\n    return [address];\n  }\n  \n  // If it's an object, format it with proper line breaks\n  if (typeof address === 'object') {\n    const lines = [];\n    \n    if (address.street) {\n      lines.push(address.street);\n    }\n    \n    const cityStateZip = [\n      address.city,\n      address.state,\n      address.zipCode\n    ].filter(Boolean).join(', ');\n    \n    if (cityStateZip) {\n      lines.push(cityStateZip);\n    }\n    \n    if (address.country) {\n      lines.push(address.country);\n    }\n    \n    return lines;\n  }\n  \n  return [];\n};\n\n/**\n * Get a short version of the address (typically just city, state)\n * @param {Object|string} address - Address object or string\n * @returns {string} Short address string\n */\nexport const formatShortAddress = (address) => {\n  if (!address) return '';\n  \n  // If it's already a string, return first part\n  if (typeof address === 'string') {\n    return address.split(',')[0] || address;\n  }\n  \n  // If it's an object, return city and state\n  if (typeof address === 'object') {\n    const parts = [address.city, address.state].filter(Boolean);\n    return parts.join(', ');\n  }\n  \n  return '';\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAIC,OAAO,IAAK;EACxC,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;;EAEvB;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAOA,OAAO;EAChB;;EAEA;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAMC,KAAK,GAAG,CACZD,OAAO,CAACE,MAAM,EACdF,OAAO,CAACG,IAAI,EACZH,OAAO,CAACI,KAAK,EACbJ,OAAO,CAACK,OAAO,EACfL,OAAO,CAACM,OAAO,CAChB,CAACC,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;;IAEnB,OAAOP,KAAK,CAACQ,IAAI,CAAC,IAAI,CAAC;EACzB;EAEA,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAIV,OAAO,IAAK;EAC7C,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;;EAEvB;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAO,CAACA,OAAO,CAAC;EAClB;;EAEA;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAMW,KAAK,GAAG,EAAE;IAEhB,IAAIX,OAAO,CAACE,MAAM,EAAE;MAClBS,KAAK,CAACC,IAAI,CAACZ,OAAO,CAACE,MAAM,CAAC;IAC5B;IAEA,MAAMW,YAAY,GAAG,CACnBb,OAAO,CAACG,IAAI,EACZH,OAAO,CAACI,KAAK,EACbJ,OAAO,CAACK,OAAO,CAChB,CAACE,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAE5B,IAAII,YAAY,EAAE;MAChBF,KAAK,CAACC,IAAI,CAACC,YAAY,CAAC;IAC1B;IAEA,IAAIb,OAAO,CAACM,OAAO,EAAE;MACnBK,KAAK,CAACC,IAAI,CAACZ,OAAO,CAACM,OAAO,CAAC;IAC7B;IAEA,OAAOK,KAAK;EACd;EAEA,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,kBAAkB,GAAId,OAAO,IAAK;EAC7C,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;;EAEvB;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAOA,OAAO,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIf,OAAO;EACzC;;EAEA;EACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAMC,KAAK,GAAG,CAACD,OAAO,CAACG,IAAI,EAAEH,OAAO,CAACI,KAAK,CAAC,CAACG,MAAM,CAACC,OAAO,CAAC;IAC3D,OAAOP,KAAK,CAACQ,IAAI,CAAC,IAAI,CAAC;EACzB;EAEA,OAAO,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}