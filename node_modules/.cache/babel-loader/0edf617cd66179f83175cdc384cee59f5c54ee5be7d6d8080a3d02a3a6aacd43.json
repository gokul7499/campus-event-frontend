{"ast":null,"code":"import _objectSpread from\"C:/Users/Baap/Desktop/campus-event-management/campus-event-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import axios from'../utils/axios';import config from'../config/config';import{apiCall}from'../utils/apiEndpoints';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,token:localStorage.getItem('token'),loading:true,error:null};// Action types\nconst AUTH_ACTIONS={LOGIN_START:'LOGIN_START',LOGIN_SUCCESS:'LOGIN_SUCCESS',LOGIN_FAILURE:'LOGIN_FAILURE',LOGOUT:'LOGOUT',REGISTER_START:'REGISTER_START',REGISTER_SUCCESS:'REGISTER_SUCCESS',REGISTER_FAILURE:'REGISTER_FAILURE',LOAD_USER_START:'LOAD_USER_START',LOAD_USER_SUCCESS:'LOAD_USER_SUCCESS',LOAD_USER_FAILURE:'LOAD_USER_FAILURE',UPDATE_PROFILE_SUCCESS:'UPDATE_PROFILE_SUCCESS',CLEAR_ERROR:'CLEAR_ERROR'};// Reducer\nconst authReducer=(state,action)=>{switch(action.type){case AUTH_ACTIONS.LOGIN_START:case AUTH_ACTIONS.REGISTER_START:case AUTH_ACTIONS.LOAD_USER_START:return _objectSpread(_objectSpread({},state),{},{loading:true,error:null});case AUTH_ACTIONS.LOGIN_SUCCESS:case AUTH_ACTIONS.REGISTER_SUCCESS:localStorage.setItem('token',action.payload.token);return _objectSpread(_objectSpread({},state),{},{user:action.payload.user,token:action.payload.token,loading:false,error:null});case AUTH_ACTIONS.LOAD_USER_SUCCESS:case AUTH_ACTIONS.UPDATE_PROFILE_SUCCESS:return _objectSpread(_objectSpread({},state),{},{user:action.payload.user,loading:false,error:null});case AUTH_ACTIONS.LOGIN_FAILURE:case AUTH_ACTIONS.REGISTER_FAILURE:case AUTH_ACTIONS.LOAD_USER_FAILURE:localStorage.removeItem('token');return _objectSpread(_objectSpread({},state),{},{user:null,token:null,loading:false,error:action.payload});case AUTH_ACTIONS.LOGOUT:localStorage.removeItem('token');return _objectSpread(_objectSpread({},state),{},{user:null,token:null,loading:false,error:null});case AUTH_ACTIONS.CLEAR_ERROR:return _objectSpread(_objectSpread({},state),{},{error:null});default:return state;}};// Create context\nconst AuthContext=/*#__PURE__*/createContext();// Auth provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);// Token is automatically handled by axios interceptor\n// Load user on app start\nuseEffect(()=>{const initializeAuth=async()=>{const token=localStorage.getItem('token');console.log('🔐 Initializing auth, token exists:',!!token);if(token){try{console.log('🔄 Loading user with existing token...');await loadUser();console.log('✅ User loaded successfully');}catch(error){var _error$response;console.error('❌ Failed to load user:',error);// Only remove token if it's definitely invalid\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){console.log('🚫 Token expired, removing from localStorage');localStorage.removeItem('token');dispatch({type:AUTH_ACTIONS.LOAD_USER_FAILURE,payload:'Token expired'});}else{dispatch({type:AUTH_ACTIONS.LOAD_USER_FAILURE,payload:'Failed to load user'});}}}else{console.log('ℹ️ No token found, user not authenticated');dispatch({type:AUTH_ACTIONS.LOAD_USER_FAILURE,payload:'No token found'});}};initializeAuth();},[]);// Remove dependency on state.token to prevent infinite loops\n// Load user\nconst loadUser=async()=>{dispatch({type:AUTH_ACTIONS.LOAD_USER_START});try{const response=await apiCall.get(axios,config.api.endpoints.auth.me);if(response.data.success&&response.data.data.user){dispatch({type:AUTH_ACTIONS.LOAD_USER_SUCCESS,payload:response.data.data});}else{throw new Error('Invalid response format from server');}}catch(error){var _error$response2,_error$response3;console.error('Load user error:',error);// Handle different types of errors\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401){// Token is invalid, remove it\nlocalStorage.removeItem('token');dispatch({type:AUTH_ACTIONS.LOAD_USER_FAILURE,payload:'Token expired, please login again'});}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)>=500){// Server error, don't remove token\ndispatch({type:AUTH_ACTIONS.LOAD_USER_FAILURE,payload:'Server error, please try again later'});}else{var _error$response4,_error$response4$data;// Other errors\ndispatch({type:AUTH_ACTIONS.LOAD_USER_FAILURE,payload:((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Failed to load user'});}// Re-throw the error so the calling function can handle it\nthrow error;}};// Login\nconst login=async(email,password)=>{dispatch({type:AUTH_ACTIONS.LOGIN_START});try{var _response$data$data;const response=await apiCall.post(axios,config.api.endpoints.auth.login,{email,password});// Validate response format\nif(response.data.success&&response.data.token&&(_response$data$data=response.data.data)!==null&&_response$data$data!==void 0&&_response$data$data.user){// Store token first\nlocalStorage.setItem('token',response.data.token);// Update state\ndispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{token:response.data.token,user:response.data.data.user}});return{success:true};}else{throw new Error('Invalid response format from server');}}catch(error){var _error$response5,_error$response5$data;console.error('Login error:',error);const errorMessage=((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Login failed';dispatch({type:AUTH_ACTIONS.LOGIN_FAILURE,payload:errorMessage});return{success:false,error:errorMessage};}};// Register\nconst register=async userData=>{dispatch({type:AUTH_ACTIONS.REGISTER_START});try{console.log('🚀 Attempting registration with data:',userData);console.log('🔗 Using endpoint:',config.api.endpoints.auth.register);console.log('🌐 Full URL will be:',\"\".concat(config.api.baseURL).concat(config.api.endpoints.auth.register));const response=await apiCall.post(axios,config.api.endpoints.auth.register,userData);dispatch({type:AUTH_ACTIONS.REGISTER_SUCCESS,payload:{token:response.data.token,user:response.data.data.user}});return{success:true};}catch(error){var _error$response6,_error$response7,_error$response8,_error$response9,_error$response0,_error$response0$data;console.error('❌ Registration error:',error);console.error('❌ Error response:',(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.data);console.error('❌ Error status:',(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.status);let errorMessage='Registration failed';if(((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.status)===404){errorMessage='Backend service not available. Please try again later.';}else if(((_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.status)>=500){errorMessage='Server error. Please try again later.';}else if((_error$response0=error.response)!==null&&_error$response0!==void 0&&(_error$response0$data=_error$response0.data)!==null&&_error$response0$data!==void 0&&_error$response0$data.message){errorMessage=error.response.data.message;}else if(error.message){errorMessage=error.message;}dispatch({type:AUTH_ACTIONS.REGISTER_FAILURE,payload:errorMessage});return{success:false,error:errorMessage};}};// Logout\nconst logout=async()=>{try{await axios.post(config.api.endpoints.auth.logout);}catch(error){console.error('Logout error:',error);}finally{dispatch({type:AUTH_ACTIONS.LOGOUT});}};// Update profile\nconst updateProfile=async profileData=>{try{const response=await axios.put(config.api.endpoints.auth.updateProfile,profileData);dispatch({type:AUTH_ACTIONS.UPDATE_PROFILE_SUCCESS,payload:response.data.data});return{success:true};}catch(error){var _error$response1,_error$response1$data;const errorMessage=((_error$response1=error.response)===null||_error$response1===void 0?void 0:(_error$response1$data=_error$response1.data)===null||_error$response1$data===void 0?void 0:_error$response1$data.message)||'Profile update failed';return{success:false,error:errorMessage};}};// Update password\nconst updatePassword=async passwordData=>{try{const response=await axios.put(config.api.endpoints.auth.updatePassword,passwordData);dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{token:response.data.token,user:response.data.data.user}});return{success:true};}catch(error){var _error$response10,_error$response10$dat;const errorMessage=((_error$response10=error.response)===null||_error$response10===void 0?void 0:(_error$response10$dat=_error$response10.data)===null||_error$response10$dat===void 0?void 0:_error$response10$dat.message)||'Password update failed';return{success:false,error:errorMessage};}};// Forgot password\nconst forgotPassword=async email=>{try{await axios.post(config.api.endpoints.auth.forgotPassword,{email});return{success:true};}catch(error){var _error$response11,_error$response11$dat;const errorMessage=((_error$response11=error.response)===null||_error$response11===void 0?void 0:(_error$response11$dat=_error$response11.data)===null||_error$response11$dat===void 0?void 0:_error$response11$dat.message)||'Failed to send reset email';return{success:false,error:errorMessage};}};// Reset password\nconst resetPassword=async(token,password)=>{try{const response=await axios.put(\"\".concat(config.api.endpoints.auth.resetPassword,\"/\").concat(token),{password});dispatch({type:AUTH_ACTIONS.LOGIN_SUCCESS,payload:{token:response.data.token,user:response.data.data.user}});return{success:true};}catch(error){var _error$response12,_error$response12$dat;const errorMessage=((_error$response12=error.response)===null||_error$response12===void 0?void 0:(_error$response12$dat=_error$response12.data)===null||_error$response12$dat===void 0?void 0:_error$response12$dat.message)||'Password reset failed';return{success:false,error:errorMessage};}};// Clear error\nconst clearError=()=>{dispatch({type:AUTH_ACTIONS.CLEAR_ERROR});};// Validate token\nconst validateToken=async()=>{const token=localStorage.getItem('token');if(!token)return false;try{const response=await axios.get(config.api.endpoints.auth.me);return response.data.success&&response.data.data.user;}catch(error){var _error$response13;if(((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.status)===401){localStorage.removeItem('token');return false;}return false;}};// Check if user is authenticated\nconst isAuthenticated=()=>{return!!(state.token&&state.user);};// Get user role\nconst getUserRole=()=>{var _state$user;return(_state$user=state.user)===null||_state$user===void 0?void 0:_state$user.role;};// Check if user has specific role\nconst hasRole=role=>{var _state$user2;return((_state$user2=state.user)===null||_state$user2===void 0?void 0:_state$user2.role)===role;};// Check if user has specific permission\nconst hasPermission=permission=>{var _state$user3,_state$user3$permissi;return(_state$user3=state.user)===null||_state$user3===void 0?void 0:(_state$user3$permissi=_state$user3.permissions)===null||_state$user3$permissi===void 0?void 0:_state$user3$permissi.includes(permission);};const value=_objectSpread(_objectSpread({},state),{},{login,register,logout,updateProfile,updatePassword,forgotPassword,resetPassword,clearError,hasPermission,hasRole,loadUser,validateToken,isAuthenticated,getUserRole});return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Custom hook to use auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export default AuthContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}