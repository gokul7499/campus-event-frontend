{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{io}from'socket.io-client';import{useAuth}from'./AuthContext';import config from'../config/config';import{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext();export const SocketProvider=_ref=>{let{children}=_ref;const[socket,setSocket]=useState(null);const[connected,setConnected]=useState(false);const{user}=useAuth();useEffect(()=>{if(user){const newSocket=io(config.socket.url,{auth:{userId:user._id}});// Connection event handlers\nnewSocket.on('connect',()=>{console.log('Socket connected:',newSocket.id);setConnected(true);// Join user's personal room\nnewSocket.emit('join',user._id);});newSocket.on('disconnect',()=>{console.log('Socket disconnected');setConnected(false);});newSocket.on('connect_error',error=>{console.error('Socket connection error:',error);setConnected(false);});setSocket(newSocket);return()=>{newSocket.close();setSocket(null);setConnected(false);};}else{if(socket){socket.close();setSocket(null);setConnected(false);}}},[user,socket]);// Send notification\nconst sendNotification=data=>{if(socket&&connected){socket.emit('send_notification',data);}};// Send event update\nconst sendEventUpdate=data=>{if(socket&&connected){socket.emit('event_update',data);}};// Subscribe to notifications\nconst onNotification=callback=>{if(socket){socket.on('notification',callback);// Return cleanup function\nreturn()=>socket.off('notification',callback);}};// Subscribe to event updates\nconst onEventUpdate=callback=>{if(socket){socket.on('event_updated',callback);// Return cleanup function\nreturn()=>socket.off('event_updated',callback);}};// Subscribe to real-time registration updates\nconst onRegistrationUpdate=callback=>{if(socket){socket.on('registration_update',callback);// Return cleanup function\nreturn()=>socket.off('registration_update',callback);}};// Join event room (for real-time updates during events)\nconst joinEventRoom=eventId=>{if(socket&&connected){socket.emit('join_event',eventId);}};// Leave event room\nconst leaveEventRoom=eventId=>{if(socket&&connected){socket.emit('leave_event',eventId);}};// Send message to event room\nconst sendEventMessage=(eventId,message)=>{if(socket&&connected){socket.emit('event_message',{eventId,message});}};// Subscribe to event messages\nconst onEventMessage=callback=>{if(socket){socket.on('event_message',callback);// Return cleanup function\nreturn()=>socket.off('event_message',callback);}};const value={socket,connected,sendNotification,sendEventUpdate,onNotification,onEventUpdate,onRegistrationUpdate,joinEventRoom,leaveEventRoom,sendEventMessage,onEventMessage};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:value,children:children});};export const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};export default SocketContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}