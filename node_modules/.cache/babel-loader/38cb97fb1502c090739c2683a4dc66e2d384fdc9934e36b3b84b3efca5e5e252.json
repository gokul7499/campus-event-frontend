{"ast":null,"code":"// API Endpoints utility with fallback support\nimport config from'../config/config';// Helper function to try multiple endpoint variations\nexport const tryEndpoints=async function(axios,baseEndpoint){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let method=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'GET';const endpoints=[baseEndpoint,// Try without /api prefix first\n\"/api\".concat(baseEndpoint)// Then try with /api prefix\n];let lastError=null;for(const endpoint of endpoints){try{console.log(\"\\uD83D\\uDD04 Trying endpoint: \".concat(config.api.baseURL).concat(endpoint));let response;switch(method.toUpperCase()){case'POST':response=await axios.post(endpoint,data);break;case'PUT':response=await axios.put(endpoint,data);break;case'DELETE':response=await axios.delete(endpoint);break;case'GET':default:response=await axios.get(endpoint);break;}console.log(\"\\u2705 Success with endpoint: \".concat(config.api.baseURL).concat(endpoint));return response;}catch(error){var _error$response,_error$response2;console.log(\"\\u274C Failed with endpoint: \".concat(config.api.baseURL).concat(endpoint),(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status);lastError=error;// If it's not a 404, don't try the next endpoint\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)!==404){throw error;}}}// If we get here, all endpoints failed\nconsole.error('ðŸš« All endpoint variations failed');throw lastError;};// Wrapper functions for common API calls\nexport const apiCall={get:(axios,endpoint)=>tryEndpoints(axios,endpoint,null,'GET'),post:(axios,endpoint,data)=>tryEndpoints(axios,endpoint,data,'POST'),put:(axios,endpoint,data)=>tryEndpoints(axios,endpoint,data,'PUT'),delete:(axios,endpoint)=>tryEndpoints(axios,endpoint,null,'DELETE')};export default{tryEndpoints,apiCall};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}