{"ast":null,"code":"/**\r\n * Utility functions for formatting addresses\r\n *//**\r\n * Format an address object or string into a readable string\r\n * @param {Object|string} address - Address object or string\r\n * @returns {string} Formatted address string\r\n */export const formatAddress=address=>{if(!address)return'';// If it's already a string, return as is\nif(typeof address==='string'){return address;}// If it's an object, format it\nif(typeof address==='object'){const parts=[address.street,address.city,address.state,address.zipCode,address.country].filter(Boolean);// Remove empty/null/undefined values\nreturn parts.join(', ');}return'';};/**\r\n * Format address for display with line breaks\r\n * @param {Object|string} address - Address object or string\r\n * @returns {Array} Array of address lines\r\n */export const formatAddressLines=address=>{if(!address)return[];// If it's already a string, return as single line\nif(typeof address==='string'){return[address];}// If it's an object, format it with proper line breaks\nif(typeof address==='object'){const lines=[];if(address.street){lines.push(address.street);}const cityStateZip=[address.city,address.state,address.zipCode].filter(Boolean).join(', ');if(cityStateZip){lines.push(cityStateZip);}if(address.country){lines.push(address.country);}return lines;}return[];};/**\r\n * Get a short version of the address (typically just city, state)\r\n * @param {Object|string} address - Address object or string\r\n * @returns {string} Short address string\r\n */export const formatShortAddress=address=>{if(!address)return'';// If it's already a string, return first part\nif(typeof address==='string'){return address.split(',')[0]||address;}// If it's an object, return city and state\nif(typeof address==='object'){const parts=[address.city,address.state].filter(Boolean);return parts.join(', ');}return'';};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}